// Define the angular module to be used in the application.
// The module takes two arguments: the name of the module and 
// an array of dependencies. The ng-app directive must reference the 
// name you choose for your module here.
var busRoutesApp = angular.module('busRoutesApp', [
    "ngResource",
    "bus_routes.map",
    "bus_routes.models.students"])

  .service('Shared', function() {
    var shared = {};
    shared.map = {};
    return shared;
  })
;
angular.module('bus_routes.models.students',[])

.service('StudentsModel', ["Student", function(Student) {
  var model = this;
  var students = [];
  model.getStudents = function() {
    if (students.length !== 0) {
      console.log(students.length);
      return students;    
    } else {
      console.log("lenth is 0, fetching from database");
      students = Student.query();
      return students;
    }
  };
}])
;

angular.module('bus_routes.models.schools', [])

  .service('SchoolsModel', function() {
    var model = this;
    schools = [
    {"name": "Surrey Christian High", "latitude": "49.170385", "longitude": "-122.796939"},
    {"name": "William of Orange", "latitude": "49.112364", "longitude": "-122.738985"},
    {"name": "Credo Christian Elementary", "latitude": "49.096882", "longitude": "-122.6161698"},
    {"name": "Credo Christian High", "latitude": "49.095947", "longitude": "-122.617342"},
    {"name": "Langley Christian Elementary", "latitude": "49.0885572", "longitude": "-122.5894669"},
    {"name": "Langley Christian Middle/High", "latitude": "49.0885595", "longitude": "-122.5951462"},
    {"name": "Surrey Christian Elementary", "latitude": "49.164418", "longitude": "-122.773024"},
    {"name": "Cloverdale Christian", "latitude": "49.110539", "longitude": "-122.726684"},
    ];
    model.getSchools = function() {
      return schools;
    };
  })
;


angular.module('bus_routes.map', [
  'bus_routes.models.schools'
])

  .controller('MapCtrl', ["$scope", "Shared", "SchoolsModel", function($scope, Shared, SchoolsModel) {

    function initialize() {
      $scope.schools = SchoolsModel.getSchools(); // Load the schools from the schools model
      $scope.shared = Shared; // Load variables to be shared between submodules
      // Set map options.
      var mapOptions = {
        center: { lat: 49.1387, lng: -122.8218 },
        zoom: 13
      };
      // Define the map.
      $scope.shared.map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
      // Set the markers for the schools.
      angular.forEach($scope.schools, function(school) {
        var marker = new google.maps.Marker({
          position: new google.maps.LatLng(school.latitude, school.longitude),
          map: $scope.shared.map,
          label: 'A',
          icon: '<%= image_url("blue_MarkerA.png") %>',
          title: school.name
        });
      });
    }; // End of initialize function.
    // Wait for the window to load and then run the initialize function.
    google.maps.event.addDomListener(window, 'load', initialize);
    
  }])
;
// This factory defines the connection to the back end database and is
// referenced in the controller using the name which is the first
// argument.
busRoutesApp.factory('Student', ["$resource", function($resource) {
  return $resource("/api/students/:id", {id: "@id"}, {update: {method: "PUT"}});
}]);

// This section defines a controller that belongs to the busRoutesApp
// module. It takes two arguments: a name and either 
// an array of dependencies with the last element being the function or
// it can just take a function. Because of the way Rails minifies JS
// files in production, we need to use the array method of specifying
// dependencies.
// The name is referenced in the view to assign control of that element
// and its children to this specific controller.
busRoutesApp.controller('StudentsListCtrl', ["$scope", "StudentsModel", function ($scope, StudentsModel) {
  
  // Define scoped variables and collections.  
  $scope.formDisplay = false;
  $scope.students = StudentsModel.getStudents(); 
  
  // Define scoped functions.
  $scope.addNewStudent = addNewStudent;
  $scope.showForm = showForm;
  $scope.hideForm = hideForm;
  
  //  Define controller functions. 
  function addNewStudent() {
    student = Student.save($scope.NewStudent);
    $scope.students.push(student);
    $scope.NewStudent = {};
  };
  function showForm() {
    $scope.formDisplay = true;
  };
  function hideForm() {
    $scope.formDisplay = false;
  };
}]);

busRoutesApp.controller('MainCtrl', ["$scope", "$filter", "StudentsModel", "Shared", function ($scope, $filter, StudentsModel, Shared) {
// If I just perform the Student.query() and then execute 
// the setMarkers function, it fails because I'm trying to access
// the $scope.students before the query is completed.
// If I provide a function within the query, and call the
// setMarkers function within that callback function, I ensure the
// query is complete before I try to access the data.  
  // Define scoped variables and collections.
  $scope.students = StudentsModel.getStudents(); 
  $scope.shared = Shared;
  $scope.seatsAssigned = 0;
  $scope.showDetails = false;
  $scope.editDetails = false;
  $scope.beginSelection = false;
  $scope.bulkAssignmentRoute = "";
  $scope.selections = [];
  $scope.firstOrderSelection = "last_name";
  $scope.clickedStudent = {"first_name":"Choose student by clicking on their marker"};
  $scope.editStudent = {};

  var studentMarkers = {};
  var existingStudentMarkers = [];
  var infowindow = new google.maps.InfoWindow({
    content: ""
  });

  // Define scoped functions.
  $scope.resetMarkers = resetMarkers;
  $scope.addMarkers = addMarkers;
  $scope.removeStudent = removeStudent;
  
  function resetMarkers(results) {
  console.log($scope.shared.map);
    deleteStudentMarkers();
    setMarkers(results);
  };
  function addMarkers(results) {
    setMarkers(results);
  };
  function setMarkers(results) {
    existingStudentMarkers = [];
    var id;
    var windowContent;
    var icon;
    var studentLatLng;
    var label = "1";
    angular.forEach(results, function(student) {
     var existingAddress = checkForExistingMarker(student.latitude, student.longitude);
     if (existingAddress) {
       marker = studentMarkers[existingAddress];
       markerNumber = parseInt(marker.label) + 1;
       marker.label = markerNumber.toString();
       marker.siblings.push(student.id); 
       marker.windowContent += student.first_name + " " + student.school + " " + student.grade + "<br>";
     } else {
       id = student.id;
       windowContent = student.last_name.toUpperCase() +  "<br>" + student.street_address + "<br>" + student.first_name + " " + student.school + " " + student.grade + "<br>"; 
       icon = setMarkerColor(student.bus_route); 
       if (student.updatedLocation) {
         studentLatLng = student.updatedLocation;
       } else {
         studentLatLng = new google.maps.LatLng(student.latitude, student.longitude);
       }
       marker = new google.maps.Marker({
         id: id,
         position: studentLatLng,
         icon: icon,
         label: label,
         siblings: [],
         windowContent: windowContent, 
         draggable: true,
         map: $scope.shared.map,
         title: student.first_name + " " + student.last_name
       });
       marker.addListener('click', function() {
         var student = $filter('filter')($scope.students, {id:this.id}, true)[0];
         infowindow.setContent(this.windowContent);
         infowindow.open($scope.map, this);
         $scope.$apply($scope.clickedStudent = student);
         if ($scope.beginSelection) {
           $scope.$apply($scope.selections.push(student));
           if (this.siblings.length !== 0) {
             for(i = 0; i < this.siblings.length; i++) {
               var siblingId = this.siblings[i];
               var sibling = $filter('filter')($scope.students, {id:siblingId}, true)[0];
               $scope.$apply($scope.selections.push(sibling));
             }
           } 
         }           
       });
       studentMarkers[id] = marker;
       existingStudentMarkers.push([student.latitude, student.longitude, id]);
     }
    });
    function checkForExistingMarker(lat, lng) {
      var matching = false;
      if (existingStudentMarkers.length !== 0) {
        for (i = 0; i < existingStudentMarkers.length; i++) {
          if (lat === existingStudentMarkers[i][0] && lng === existingStudentMarkers[i][1]) {
             matching = existingStudentMarkers[i][2];
          } 
        }
        return matching;
      } else {
        return false;
      }
    };
  };   
  function setMarkerColor(bus_route) {
    switch (bus_route) {
      case 101: 
        icon = '<%= image_url("brightBlue.png") %>';
        break;
      case 102: 
        icon = '<%= image_url("brightGreen.png") %>';
        break;
      case 103: 
        icon = '<%= image_url("camoGreen.png") %>';
        break;
      case 104: 
        icon = '<%= image_url("cream.png") %>';
        break;
      case 105: 
        icon = '<%= image_url("grey.png") %>';
        break;
      case 106: 
        icon = '<%= image_url("lightBlue.png") %>';
        break;
      case 107: 
        icon = '<%= image_url("lightOrange.png") %>';
        break;
      case 108: 
        icon = '<%= image_url("medGreen.png") %>';
        break;
      case 201: 
        icon = '<%= image_url("offWhite.png") %>';
        break;
      case 202: 
        icon = '<%= image_url("orange.png") %>';
        break;
      case 203: 
        icon = '<%= image_url("paleYellow.png") %>';
        break;
      case 204: 
        icon = '<%= image_url("pink.png") %>';
        break;
      case 205: 
        icon = '<%= image_url("purple.png") %>';
        break;
      case 206: 
        icon = '<%= image_url("tan.png") %>';
        break;
      case 207: 
        icon = '<%= image_url("teal.png") %>';
        break;
      case 208: 
        icon = '<%= image_url("yellow.png") %>';
        break;
      default:
        icon = '<%= image_url("red.png") %>';
    }
    return icon;
  };
  function deleteStudentMarkers() {
    angular.forEach(studentMarkers, function(marker) {
      marker.setMap(null);
    });
  };

  function removeStudent(student_id) {
    for(i=0; i < $scope.students.length; i++) {
      var compareStudent = $scope.students[i];
      if (student_id === compareStudent.id) {
        var student = compareStudent;
        var index = i;
        break;
      }
    }
    student.$remove();
    $scope.students.splice(index, 1);
  };
  $scope.showStudentDetails = function(student_id) {
    for(i=0; i < $scope.students.length; i++) {
      var compareStudent = $scope.students[i];
      if (student_id === compareStudent.id) {
        var student = compareStudent;
        var index = i;
        break;
      }
    }
    $scope.detailStudent = student;
    $scope.showDetails = true;
  };
  $scope.showStudentEdit = function(student_id) {
    for(i=0; i < $scope.students.length; i++) {
      var compareStudent = $scope.students[i];
      if (student_id === compareStudent.id) {
        var student = compareStudent;
        var index = i;
        break;
      }
    }
    $scope.editStudent = student;
    $scope.editStudent.original_address = student.street_address;
    $scope.editStudent.original_city = student.city;
    $scope.editStudent.original_postal_code = student.postal_code;
    $scope.editDetails = true;
  };
  $scope.updateEditStudent = function() {
    var student = $scope.editStudent;
    var addressChanged = $scope.editStudent.original_address !== student.street_address;
    var cityChanged = $scope.editStudent.original_city !== student.city;
    var postalCodeChanged = $scope.editStudent.original_postal_code !== student.postal_code;
    student.$update();
    if (addressChanged || cityChanged || postalCodeChanged) {
      if (student.postal_code === null) {
        student.postal_code = " ";
      }
      var address = student.street_address + "," + student.city + "," + "BC" + " " + student.postal_code;
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode( {'address':address}, function(results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          if (studentMarkers[student.id]) {
            var marker = studentMarkers[student.id];  
            marker.windowContent += "Address Changed To: " + student.street_address;
            marker.position = results[0].geometry.location;
            marker.setMap(null);
            marker.setMap($scope.map);
          }
          student.updatedLocation = results[0].geometry.location;
        } else {
          alert("Student marker update wasn't successful for the following reason: " + status);
        }
      });
    }
    $scope.editDetails = false;
  };
  


  function markerLatitude(marker) {
    var lat = marker.getPosition().lat();
    return lat;
  };
  function markerLongitude(marker) {
    var lng = marker.getPosition().lng();
    return lng;
  };
  function deleteRouteMarkers() {
    angular.forEach(markers, function(marker) {
      marker.setMap(null);
    });
  };
  $scope.updateStudent = function() {
    for(i=0; i < $scope.students.length; i++) {
      var student = $scope.students[i];
      if ($scope.clickedStudent.id === student.id) {
        student.bus_route = parseInt($scope.clickedStudent.bus_route);
        break;
      }
    }
    student.$update();
    marker = studentMarkers[$scope.clickedStudent.id];
    if (marker.siblings.length !== 0) {
      for (i=0; i < marker.siblings.length; i++) {
        var siblingId = marker.siblings[i];
        for (c = 0; c < $scope.students.length; c++) {
          var siblingStudent = $scope.students[c];
          if (siblingStudent.id === siblingId) {
            siblingStudent.bus_route = student.bus_route;
            siblingStudent.stop = student.stop;
            siblingStudent.mon_thurs = student.mon_thurs;
            siblingStudent.friday = student.friday;
            siblingStudent.$update();
            break;
          }
        }
      }
    }
    icon = setMarkerColor($scope.clickedStudent.bus_route);
    marker.icon = icon;
    marker.setMap(null);
    marker.setMap($scope.map);
    $scope.clickedStudent = {};
  };
  $scope.printMap = function() {
    var content = window.document.getElementById("map-canvas"); // get you map details
    var newWindow = window.open(); // open a new window
    newWindow.document.write(content.innerHTML); // write the map into the new window
    newWindow.print(); // print the new window
  };
  $scope.deleteRouteFilter = function() {
    if ($scope.Route === "") {
      delete $scope.Route;
    }
  };
  $scope.clearSelected = function() {
    $scope.selections = [];
  };
  $scope.removeFromSelections = function(index) {
    $scope.selections.splice(index, 1);
  };
  $scope.bulkAssignRoute = function() {
    var route = parseInt($scope.bulkAssignmentRoute);
    angular.forEach($scope.selections, function(student) {
      student.bus_route = route;
      student.$update();
      if (studentMarkers[student.id]) {
        var marker = studentMarkers[student.id];
        var icon = setMarkerColor(student.bus_route);
        marker.icon = icon;
        marker.setMap(null);
        marker.setMap($scope.map);
      }
    });
  };
    

  $scope.seatsFilled = function(results) {
    var seatCount = 0;
    angular.forEach(results, function(student) {
      switch(student.grade) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          seatCount += 1;
          break;
        default:
          seatCount += 1.5;
      }
    });
    $scope.seatsAssigned = seatCount;
  };
}]);
